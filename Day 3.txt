Problems using Binary Search :

1. Find Peak Element : A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
Example :
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

2.Find Index in Mountain Array : You are given an integer mountain array arr of length n where the values increase to a peak element and then decrease.
Return the index of the peak element.
The array must follows the condition: ARRAY[0] < ARRAY[1] < ARRAY[i-1] < ARRAY[ i] > ARRAY[ i+1 ] > ARRAY[..] > ARRAY[length-1]
Example :
Input: arr = [0,2,1,0]
Output: 1.

3.Order-Agnostic Binary Search is a modified version of Binary Search algorithm. Here in this modified binary search comes with one more condition checking. The intuition behind this algorithm is what if the order of the sorted array is not given. So here check that the value of the first element is greater or smaller than the last element.

4.Rotated Array : We need  to search for a target element in a rotated sorted array. It first finds the pivot point where the array is rotated using the findPivot function. Based on the pivot, it performs a binary search in the appropriate section of the array. An additional method, findPivotWithDuplicates, handles arrays containing duplicate elements.


All the problems which solved are on the Leet Code Platform.
The Links will be provided here : 
1.Rotated Array : https://leetcode.com/problems/search-in-rotated-sorted-array/  (Medium)
2.Find Peak Element : https://leetcode.com/problems/find-peak-element/   (Medium)
3.Find Mountain : https://leetcode.com/problems/peak-index-in-a-mountain-array/  (Medium)

Git Hub : https://github.com/sriharsh43/Algorithms.git





Peak Element Pseudo Reference : 
//in the end, start == end and pointing to the largest number because of the 2 checks above
 	// start and end are always trying to find max element in the above 2 checks
        // hence, when they are pointing to just one element, that is the max one because that is what the checks say
        // more elaboration: at every point of time for start and end, they have the best possible answer till that time
        // and if we are saying that only one item is remaining, hence cuz of above line that is the best possible ans
        return start; // or return end as both are equal.